--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

type Ext2GroupDescriptor = #{
    block_bitmap        : U32,
    inode_bitmap        : U32,
    inode_table         : U32,

    free_block_count    : U16,
    free_inode_count    : U16,
    directory_count     : U16
}

type GroupDescUseAcc = (ExState, Option Ext2GroupDescriptor)
type GroupDescUseObsv = (U32)

group_desc_use: ArrayUseValueF OSBuffer GroupDescUseAcc GroupDescUseObsv
group_desc_use #{elem = group_buf, acc = (ex, maybe_group_desc), obsv = (offset)} =
    let (ex, res) = deserialise_Ext2GroupDescriptor (ex, group_buf, offset * const_sizeof_Ext2GroupDescriptor)
    in res
    | Success (group_descriptor, _) -> (ex, Some group_descriptor)
    | Error () -> 
        let _ = _cogent_log (dbg_EXT2_GROUPDESC, "group_desc_use: ERROR: failed to deser group desc at offset ")
        and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, (offset * const_sizeof_Ext2GroupDescriptor))
        and _ = _cogent_log (dbg_EXT2_GROUPDESC, "\n")
        in (ex, None)

group_desc_from_block_group: (ExState, FsState, U32) -> RR (ExState, FsState) (Ext2GroupDescriptor) ()
group_desc_from_block_group (ex, state, block_group_num) =
    let group_desc_num = block_group_num >> const_descPerBlockBits
    and offset = group_desc_offset block_group_num

    --and _ = _cogent_log (dbg_EXT2_GROUPDESC, ("at array idx "))
    --and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, (group_desc_num))
    --and _ = _cogent_log (dbg_EXT2_GROUPDESC, (" and byte offset "))
    --and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, (offset * const_sizeof_Ext2GroupDescriptor))
    --and _ = _cogent_log (dbg_EXT2_GROUPDESC, ("\n"))

    and (ex, maybe_group_desc) = array_use_value
        [OSBuffer, GroupDescUseAcc, GroupDescUseObsv]
        #{arr = state.group_desc_array, idx = group_desc_num, f = group_desc_use, acc = (ex, None), obsv = (offset)} !state
    in maybe_group_desc
    | Some group_descriptor ->
        ((ex, state), Success (group_descriptor))
    | None ->
        let _ = _cogent_log (dbg_EXT2_GROUPDESC, "group_desc_from_block_group: ERROR: could not get group desc from array\n")
        in ((ex, state), Error ())


--------------------------------

-- removes the relevant group desc buf from state.group_desc_array
group_desc_and_buf_from_block_group: (ExState, FsState, U32) -> RR (ExState, FsState) (Ext2GroupDescriptor, OSBuffer) ()
group_desc_and_buf_from_block_group (ex, state, block_group_num) =
    let group_desc_num = block_group_num >> const_descPerBlockBits
    and offset = group_desc_offset (block_group_num)

    and state_t { group_desc_array } = state
    and (group_desc_array, res) = array_remove [OSBuffer] (group_desc_array, group_desc_num)
    in res
    | Some group_desc_buf =>
        let (ex, res) = deserialise_Ext2GroupDescriptor (ex, group_desc_buf, offset * const_sizeof_Ext2GroupDescriptor) !group_desc_buf
        in res
        | Success (group_desc, _) => 
            let state = state_t { group_desc_array }
            in ((ex, state), Success (group_desc, group_desc_buf))
        | Error () ->
            -- put it back
            let ((ex, group_desc_array), _) = array_replace [OSBuffer] #{
                arr  = group_desc_array,
                idx  = group_desc_num,
                elem = group_desc_buf,
                f    = osbuffer_destroy,
                ex }
            and state = state_t { group_desc_array }
            in ((ex, state), Error ())
    | None ->
        let state = state_t { group_desc_array }
        in ((ex, state), Error ())

put_group_desc_buf_in_array: (ExState, FsState, U32, OSBuffer) -> RR (ExState, FsState) () ()
put_group_desc_buf_in_array (ex, state, block_group_num, group_desc_buf) =
    let state_t { group_desc_array } = state
    and group_desc_num = block_group_num >> const_descPerBlockBits
    and ((ex, group_desc_array), res) = array_replace [OSBuffer] #{
        arr  = group_desc_array,
        idx  = group_desc_num,
        elem = group_desc_buf,
        f    = osbuffer_destroy,
        ex }
    and state = state_t { group_desc_array }
    in ((ex, state), res)

---------------------

group_desc_first_block: (U32, U32, U32, U32) -> U32
group_desc_first_block (blocks_per_group, first_data_block, block_group_num, superblock_num) =
    -- the below is basically ext2_group_first_block_no
    block_group_num * (blocks_per_group + first_data_block)

group_desc_first_block2: (FsState!, U32) -> U32
group_desc_first_block2 (state, block_group_num) =
    group_desc_first_block (state.super.blocks_per_group,
                            state.super.first_data_block,
                            block_group_num,
                            state.superblock_num)


-- same as descriptor_loc in linux
group_desc_blockptr: (U32, U32, U32, U32) -> U32
group_desc_blockptr (blocks_per_group, first_data_block, block_group_num, superblock_num) =
    superblock_num + block_group_num + 1

----------------------

group_desc_offset: U32 -> OSBufferOffset
group_desc_offset block_group_num = block_group_num .&. (const_descPerBlock - 1)

group_desc_buf_from_block_group: (ExState, U32, U32, U32, U32) -> RR (ExState) (OSBuffer) ()
group_desc_buf_from_block_group (ex, blocks_per_group, first_data_block, block_group_num, superblock_num) =
    let block = group_desc_blockptr (blocks_per_group, first_data_block, block_group_num, superblock_num)
    --and offset = group_desc_offset block_group_num

    --and _ = _cogent_log (dbg_EXT2_GROUPDESC, ("block group "))
    --and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, block_group_num)
    --and _ = _cogent_log (dbg_EXT2_GROUPDESC, (" at block "))
    --and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, (block))
    --and _ = _cogent_log (dbg_EXT2_GROUPDESC, ("\n"))

    and (ex, res) = ext2_get_block (ex, block)
    in res
    | Success (group_buf) ->
        (ex, Success group_buf)
    | Error () ->
        let _ = _cogent_log (dbg_EXT2_GROUPDESC, ("group_desc_buf_from_block_group: ERROR: failed to get group desc block at "))
        and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, block)
        and _ = _cogent_log (dbg_EXT2_GROUPDESC, " for block group ")
        and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, block_group_num)
        and _ = _cogent_log (dbg_EXT2_GROUPDESC, "\n")
        in (ex, Error ())

type GroupDescLoaderAcc = (ExState, U32)
type GroupDescLoaderObsv = (U32, U32, U32)

put_group_desc_in_array: ArrayMapF OSBuffer GroupDescLoaderAcc GroupDescLoaderObsv GroupDescLoaderAcc
put_group_desc_in_array #{oelem = maybe_buffer, acc = (ex, idx), obsv = (blocks_per_group, first_data_block, superblock_num)} =
    maybe_buffer
    | None ->
        let (ex, res) = group_desc_buf_from_block_group (ex, blocks_per_group, first_data_block, idx, superblock_num)
        in res
        | Success desc_buf ->
            Iterate (Some desc_buf, (ex, idx + 1))
        | Error () ->
            Break (None, (ex, idx + 1))
    | Some buf ->
        -- should never happen - we've only just allocated the array!
        let ex = osbuffer_destroy (ex, buf)
        in Break (None, (ex,  idx + 1))

deserialise_Ext2GroupDescriptor: (ExState, OSBuffer!, U32) -> RR (ExState) (#Ext2GroupDescriptor, U32) ()
deserialise_Ext2GroupDescriptor (ex, buf, idx) =
    osbuffer_deserialise_Ple32 (buf, idx)
    | Success (block_bitmap, idx) ->
        osbuffer_deserialise_Ple32 (buf, idx)
        | Success (inode_bitmap, idx) ->
            osbuffer_deserialise_Ple32 (buf, idx)
            | Success (inode_table, idx) ->
                osbuffer_deserialise_Ple16 (buf, idx)
                | Success (free_block_count, idx) ->
                    osbuffer_deserialise_Ple16 (buf, idx)
                    | Success (free_inode_count, idx) ->
                        osbuffer_deserialise_Ple16 (buf, idx)
                        | Success (directory_count, idx) ->
                            let obj = #{ 
                                block_bitmap,
                                inode_bitmap,
                                inode_table,
                                free_block_count,
                                free_inode_count,
                                directory_count }
                            in (ex, Success (obj, idx))
                        | Error () -> (ex, Error ())
                    | Error () -> (ex, Error ())
                | Error () -> (ex, Error ())
            | Error () -> (ex, Error ())
        | Error () -> (ex, Error ())
    | Error () -> (ex, Error ())

-- FIXME: don't eat the error here
group_desc_set_free_block_count: (ExState, U32, OSBuffer, U16) -> (ExState, OSBuffer)
group_desc_set_free_block_count (ex, block_group, buf, free_block_count) =
    let offset = ((group_desc_offset block_group) * const_sizeof_Ext2GroupDescriptor) + (3 * 4)

    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "group_desc_set_free_block_count: block group ")
    and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, block_group)
    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "'s free block count now ")
    and _ = _cogent_log_u16 (dbg_EXT2_GROUPDESC, free_block_count)
    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "\n")

    in osbuffer_serialise_Ple16 (buf, offset, free_block_count)
    | Success (buf, _) => 
        osbuffer_dirty (ex, buf)
    | Error (buf) ->
        let _ = _cogent_warn ("set block count serialistion failed\n")
        in (ex, buf)

group_desc_set_free_inode_count: (ExState, U32, OSBuffer, U16) -> (ExState, OSBuffer)
group_desc_set_free_inode_count (ex, block_group, buf, free_inode_count) =
    let offset = ((group_desc_offset block_group) * const_sizeof_Ext2GroupDescriptor) + ((3 * 4) + (1 * 2))

    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "group_desc_set_free_inode_count: block group ")
    and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, block_group)
    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "'s free inode count now ")
    and _ = _cogent_log_u16 (dbg_EXT2_GROUPDESC, free_inode_count)
    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "\n")

    in osbuffer_serialise_Ple16 (buf, offset, free_inode_count)
    | Success (buf, _) => 
        osbuffer_dirty (ex, buf)
    | Error (buf) ->
        let _ = _cogent_warn ("set block count serialistion failed\n")
        in (ex, buf)

group_desc_set_directory_count: (ExState, U32, OSBuffer, U16) -> (ExState, OSBuffer)
group_desc_set_directory_count (ex, block_group, buf, directory_count) =
    let offset = ((group_desc_offset block_group) * const_sizeof_Ext2GroupDescriptor) + ((3 * 4) + (2 * 2))

    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "group_desc_set_directory_count: block group ")
    and _ = _cogent_log_u32 (dbg_EXT2_GROUPDESC, block_group)
    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "'s directory count now ")
    and _ = _cogent_log_u16 (dbg_EXT2_GROUPDESC, directory_count)
    and _ = _cogent_log (dbg_EXT2_GROUPDESC, "\n")

    in osbuffer_serialise_Ple16 (buf, offset, directory_count)
    | Success (buf, _) => 
        osbuffer_dirty (ex, buf)
    | Error (buf) ->
        let _ = _cogent_warn ("set directory count serialistion failed\n")
        in (ex, buf)

get_block_bitmap: (ExState, FsState, U32) -> RR (ExState, FsState) (OSBuffer) ()
get_block_bitmap (ex, state, block) = 
    let (ex, res) = ext2_get_block (ex, block)
    in ((ex, state), res)
