--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

type BlockPtr = U32
type LogicalBlock = U32

type Indirect = {
  blockptr: BlockPtr,     -- `key' in Linux
  buf: Option OSBuffer,   -- `bh' in Linux
                          -- NOTE: IT IS PERFECTLY ACCEPTABLE FOR SOME
                          -- ELEMENTS NOT EXIST! IN PARTICULAR, IDX = 0
                          --
                          -- THIS IS BECAUSE YOU SHOULD UPDATE THE INODE
                          -- INSTEAD!
                          --
                          -- DO NOT HANDLE THIS AS AN ERROR CASE IN THAT
                          -- SITUATION.

  offset: U32
}

indirect_from_inode: (ExState, Chain, VfsInode!, Depth) -> RR (ExState, Chain) Indirect ()
indirect_from_inode (ex, chain, inode, depth) =
  let offset = wordarray_get [U32] (chain.path.offsets, depth) !chain
  and block = wordarray_get [BlockPtr] (inode.fs.block_pointers, offset) !chain

  -- create a new indirect
  and (ex, chain, maybe_indirect) = indirect_from_chain (ex, chain, depth)
  in maybe_indirect
  | Some indirect_t =>
    let nobuf : Option OSBuffer = None
    and indirect = indirect_t { blockptr = block, buf = nobuf, offset }
    in ((ex, chain), Success indirect)
  | None -> ((ex, chain), Error ())

--indirect_new: (BlockPtr, Option OSBuffer) -> Indirect
malloc_Indirect: ExState -> RR ExState (Indirect take (..)) ()
free_Indirect: (ExState, Indirect take (..)) -> ExState

indirect_from_chain: (ExState, Chain, U32) -> (ExState, Chain, Option (Indirect take (..)))
indirect_from_chain (ex, chain, idx) =
  let chain_t { indirects } = chain
  and (indirects, maybe_indirect) = array_remove [Indirect] (indirects, idx)
  and chain = chain_t { indirects }

  in maybe_indirect
  | Some indirect =>
    let indirect_t { buf } = indirect
    in buf
    | Some buf ->
      let ex = osbuffer_destroy (ex, buf)
      in (ex, chain, Some indirect_t)
    | _ -> (ex, chain, Some indirect_t)
  | _ -> (ex, chain, None)

indirect_restore: (ExState, Chain, Indirect, U32) -> (ExState, Chain)
indirect_restore (ex, chain, indirect, idx) =
  let indirect_t { buf } = indirect
  in buf
  | Some buf ->
    let ex = osbuffer_destroy (ex, buf)
    and indirect = indirect_t { blockptr = 0, buf = None, offset = 0 }
    in chain_put_indirect (ex, chain, indirect, idx)
  | _ -> 
    let indirect = indirect_t { blockptr = 0, buf = None, offset = 0 }
    in chain_put_indirect (ex, chain, indirect, idx)

indirect_restore_taken: (ExState, Chain, Indirect take (..), U32) -> (ExState, Chain)
indirect_restore_taken (ex, chain, indirect_t, idx) =
  let indirect = indirect_t { blockptr = 0, buf = None, offset = 0 }
  in chain_put_indirect (ex, chain, indirect, idx)

-- poor man's dereference
indirect_read_blockptr: (Indirect!, VfsInode!) -> BlockPtr
indirect_read_blockptr (indirect, inode) = indirect_read_blockptr_at (indirect, inode, indirect.offset)

-- TODO: may want a version that returns a Result rather than 0 on OOB
indirect_read_blockptr_at: (Indirect!, VfsInode!, LogicalBlock) -> BlockPtr
indirect_read_blockptr_at (indirect, inode, offset) = indirect_dereference (indirect.buf, inode, offset)

-- TODO: not happy with this name..
indirect_dereference: (Option OSBuffer!, VfsInode!, OSBufferOffset) -> BlockPtr
indirect_dereference (maybe_buf, inode, offset) =
  maybe_buf
  | Some buf ->
    --let _ = _cogent_log "indirect_dereference: had buf\n"
    osbuffer_deserialise_Ple32 (buf, offset * 4)
    | Success (ptr, _) => ptr
    | Error () -> let _ = _cogent_assert2 ("indirect_read_blockptr_at: OOB on buffer", True) in 0
  | None ->
    if offset < const_numBlockPointers then
      wordarray_get [BlockPtr] (inode.fs.block_pointers, offset)
    else
      let _ = _cogent_assert2 ("indirect_read_blockptr_at: OOB on block_pointers", True) in 0

indirect_set_blockptr: (Indirect, VfsInode, BlockPtr) -> (Indirect, VfsInode)
indirect_set_blockptr (indirect, inode, ptr) =
  let offset = indirect.offset !indirect
  in indirect_set_blockptr_at (indirect, inode, offset, ptr)

indirect_set_blockptr_at: (Indirect, VfsInode, OSBufferOffset, BlockPtr) -> (Indirect, VfsInode)
indirect_set_blockptr_at (indirect, inode, offset, ptr) =
  let indirect_t { buf } = indirect
  and (buf, inode) = indirect_set_reference (buf, inode, offset, ptr)
  and indirect = indirect_t { buf }
  in (indirect, inode)  

indirect_set_reference: (Option OSBuffer, VfsInode, U32, U32) -> (Option OSBuffer, VfsInode)
indirect_set_reference (maybe_buf, inode, offset, ptr) =
  maybe_buf
  | Some buf ->
    osbuffer_serialise_Ple32 (buf, offset * 4, ptr)
    | Success (buf, _) => (Some buf, inode)
    | Error buf ->
      let _ = _cogent_assert2 ("indirect_set_blockptr_at: OOB on buffer", True)
      in (Some buf, inode)
  | None ->
    if offset < const_numBlockPointers then
      let inode_t { fs } = inode
      and fs_t { block_pointers } = fs

      and block_pointers = wordarray_put2 [BlockPtr] #{ arr = block_pointers, idx = offset, val = ptr }
      and fs = fs_t { block_pointers }
      and inode = inode_t { fs }

      in (None, inode)
    else
      let _ = _cogent_assert2 ("indirect_set_blockptr_at: OOB on block_pointers", True)
      in (None, inode)

indirect_destroy2: (ExState, Indirect) -> ExState
indirect_destroy2 (ex, indirect) =
  let indirect_t { buf } = indirect
  and ex = free_Indirect (ex, indirect_t)
  in buf
  | Some buf -> osbuffer_destroy (ex, buf)
  | _ -> ex

------------------------------------------------------------------------------
-- splicing two allocated chains together (one is already on disk)
------------------------------------------------------------------------------

splice_put_direct_blocks_inode: WordArrayMapNoBreakF U32 U32 ()
splice_put_direct_blocks_inode r { acc = ptr } = (ptr, ptr + 1)

splice_put_direct_blocks_buf: Seq32_body (OSBuffer, U32, U32) () ()
splice_put_direct_blocks_buf r { idx, acc = (buf, ptr, offset) } =
  osbuffer_serialise_Ple32 (buf, offset, ptr)
  | Success (buf, _) => ((buf, ptr + 1, offset + 4), Iterate ())
  | Error buf ->
    let _ = _cogent_assert2 ("splice_put_direct_blocks_buf: OOB on buf", True)
    in ((buf, ptr, offset), Iterate ())

-- connects an allocated branch onto an inode
-- actual connection is atomic
indirect_splice: (ExState, Indirect, VfsInode, LogicalBlock, U32, U32) -> RR (ExState, Indirect, VfsInode) () U32
indirect_splice (ex, indirect, inode, iblock, num_direct, num_indirect) =
  let indirect_t { buf } = indirect
  in buf
  | Some buf ->
    -- perform the splice
    osbuffer_serialise_Ple32 (buf, indirect_t.offset * 4, indirect_t.blockptr) !indirect_t
    | Success (buf, _) =>
      -- fill in any extra indirect blocks we also allocated at the same time
      let buf = if num_indirect == 0 then
        let ((buf, _, _), _) = seq32 [(OSBuffer, U32, U32), (), ()] #{
          frm  = 1,
          to   = num_direct,
          step = 1,
          f    = splice_put_direct_blocks_buf,
          acc  = (buf, indirect_t.blockptr + 1, indirect_t.offset + 4), 
          obsv = () } !indirect_t
        in buf
        else buf

      -- add buffer to inode's dirty list
      and inode = vfs_inode_add_dirty_osbuffer (inode, buf) !buf
      and indirect = indirect_t { buf = Some buf }
      in indirect_splice_finish (ex, indirect, inode)
    | Error buf ->
      let _ = _cogent_assert2 ("indirect_splice: OOB on indirect buf", True)
      and indirect = indirect_t { buf = Some buf }
      in ((ex, indirect, inode), Error eIO) -- failed to serialise buffer
  | None ->
    -- was from inode
    let indirect = indirect_t { buf = None }
    and inode_t { fs } = inode
    and fs_t { block_pointers } = fs

    -- splice it
    and block_pointers = wordarray_put2 [U32] #{
      arr = block_pointers,
      idx = indirect.offset,
      val = indirect.blockptr } !indirect

    -- fill in any extra indirect blocks we also allocated at the same time
    in if num_indirect == 0 then
      let (block_pointers, _) = wordarray_map_no_break [U32, U32, ()] #{
        arr  = block_pointers,
        frm  = indirect.offset + 1,
        to   = indirect.offset + num_direct,
        f    = splice_put_direct_blocks_inode,
        acc  = indirect.blockptr + 1,
        obsv = () } !indirect

      -- same stuff on both branches
      and fs = fs_t { block_pointers }
      and inode = inode_t { fs }
      in indirect_splice_finish (ex, indirect, inode)

    else
      -- same stuff on both branches
      let fs = fs_t { block_pointers }
      and inode = inode_t { fs }
      in indirect_splice_finish (ex, indirect, inode)

indirect_splice_finish: (ExState, Indirect, VfsInode) -> RR (ExState, Indirect, VfsInode) () U32
indirect_splice_finish (ex, indirect, inode) =
  -- TODO: check if inode had SYNC flag (and if so, sync)

  -- inode changed now
  let (ex, current_time) = os_get_current_time (ex)
  and inode = vfs_inode_set_ctime (inode, current_time)

  -- dirty inode, so changes go to disk
  and (ex, inode) = vfs_inode_mark_dirty (ex, inode)
  in ((ex, indirect, inode), Success ())
