--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

type BlockOffset = U32
type Depth = U32
type Boundary = U32

type Path = #{
  offsets   : WordArray BlockOffset,
  depth     : Depth,
  boundary  : Boundary
}

path_new_from_block: (ExState, FsState, LogicalBlock) -> RR (ExState, FsState) Path ()
path_new_from_block (ex, state, block_num) = 
  let state_t { prealloc_offsets } = state
  and state = state_t { prealloc_offsets = None }

  in prealloc_offsets
  | Some offsets =>
    let path = path_from_block (offsets, block_num)
    in ((ex, state), Success path)
  | None -> ((ex, state), Error ())

--path_destroy: (ExState, Path) -> ExState
--path_destroy (ex, path) =
--  let path_t { .. } = path
--  in wordarray_free [BlockOffset] (ex, offsets)

path_restore: (ExState, FsState, Path) -> (ExState, FsState)
path_restore (ex, state, path) =
  let state { prealloc_offsets } = state
  and ex = free_option_wordarray (ex, prealloc_offsets)

  -- TODO: zero offsets array?
  and path_t {offsets} = path
  and state = state { prealloc_offsets = Some offsets }
  in (ex, state)

-- inode.c#L160: ext2_block_to_path
path_from_block: (WordArray BlockOffset, LogicalBlock) -> Path
path_from_block (path, block_num) = 
  let chain_blocks = const_addrPerBlock
  and double_blocks = 1 << (const_addrPerBlockBits * 2)

  and block_num' = block_num - const_numDirectBlocks

  in if block_num < const_numDirectBlocks then
    let boundary = const_numDirectBlocks - 1 - (block_num .&. (const_addrPerBlock - 1))
    and path = wordarray_put2[BlockOffset] #{arr = path, idx = 0, val = block_num}
    in #{ offsets = path, depth = 1, boundary }
  else
    let block_num'' = block_num' - chain_blocks
    in if block_num' < const_addrPerBlock then
      let path = wordarray_put2[BlockOffset] #{arr = path, idx = 0, val = const_singleIndirectIdx}
      and path = wordarray_put2[BlockOffset] #{arr = path, idx = 1, val = block_num'}
      and boundary = const_addrPerBlock - 1 - (block_num' .&. (const_addrPerBlock - 1))
      in #{ offsets = path, depth = 2, boundary }
    else
      let block_num'' = block_num' - chain_blocks
      in if block_num'' < double_blocks then
        let path = wordarray_put2[BlockOffset] #{arr = path, idx = 0, val = const_doubleIndirectIdx}
        and path = wordarray_put2[BlockOffset] #{arr = path, idx = 1, val = block_num'' >> const_addrPerBlockBits}
        and path = wordarray_put2[BlockOffset] #{arr = path, idx = 2, val = block_num'' .&. (const_addrPerBlock - 1)}
        and boundary = const_addrPerBlock - 1 - (block_num'' .&. (const_addrPerBlock - 1))
        in #{ offsets = path, depth = 3, boundary }
      else 
        let block_num''' = block_num'' - double_blocks
        and first_ptr = (block_num''' >> (const_addrPerBlockBits * 2))
        and was_triple_chain = (first_ptr < const_addrPerBlock)
        in was_triple_chain
        | True ->
            let path = wordarray_put2[BlockOffset] #{arr = path, idx = 0, val = const_tripleIndirectIdx}
            and path = wordarray_put2[BlockOffset] #{arr = path, idx = 1, val = first_ptr}
            and path = wordarray_put2[BlockOffset] #{arr = path, idx = 2, val = (block_num''' >> const_addrPerBlockBits) .&. (const_addrPerBlock - 1)}
            and path = wordarray_put2[BlockOffset] #{arr = path, idx = 3, val = (block_num''' .&. (const_addrPerBlock - 1))}
            and boundary = const_addrPerBlock - 1 - (block_num''' .&. (const_addrPerBlock - 1))
            in #{ offsets = path, depth = 4, boundary }
        | _ ~>
            -- block number too big
            #{ offsets = path, depth = 0, boundary = 0 }

path_peek_offset: Path! -> BlockOffset
path_peek_offset path = wordarray_get [BlockOffset] (path.offsets, path.depth - 1)

--path_get_offset: (Path, U32)
