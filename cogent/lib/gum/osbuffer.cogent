--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

include "common.cogent"

type OSBuffer
type OSBufferOffset = U32

-- creates a buffer the size of one block
-- on linux, this is a no-op, since we get a new buffer created on read
{-# cinline osbuffer_create #-}
osbuffer_create: ExState -> RR ExState OSBuffer ()

{-# cinline osbuffer_destroy #-}
osbuffer_destroy: (ExState, OSBuffer) -> ExState -- brelse; really should be free
{-# cinline osbuffer_trash #-}
osbuffer_trash: (ExState, OSBuffer) -> ExState -- bforget; really should be destroy

{-# cinline osbuffer_read_block #-}
osbuffer_read_block: #{ex: ExState, buf: OSBuffer, blk: U32} -> RR (ExState, OSBuffer) () ()
{-# cinline osbuffer_get_size #-}
osbuffer_get_size: OSBuffer! -> U32
{-# cinline osbuffer_set_size #-}
osbuffer_set_size: (OSBuffer, U32) -> OSBuffer

-- hint to not reorder this buffer fetch
{-# cinline osbuffer_boundary #-}
osbuffer_boundary: OSBuffer -> OSBuffer

{-# cinline osbuffer_get_blocknum #-}
osbuffer_get_blocknum: OSBuffer! -> U32

{-# cinline osbuffer_readahead #-}
osbuffer_readahead: (ExState, U32) -> ExState

-- type WordArrayFoldF a acc obsv rbrk = ElemAO a acc obsv! -> LoopResult acc rbrk
--type ElemAO a acc obsv = #{elem:a, acc:acc, obsv:obsv!}

osbuffer_sync_dirty: OSBuffer -> OSBuffer

osbuffer_serialise_Ple32_WordArray: WordArrayFoldF U32 (OSBuffer, OSBufferOffset) () (OSBuffer, OSBufferOffset)
osbuffer_serialise_Ple32_WordArray #{elem, acc = (buf, idx), obsv} =
  osbuffer_serialise_Ple32 (buf, idx, elem)
  | Success (buf, idx') ->
    Iterate (buf, idx')
  | Error buf ->
    Break (buf, idx)

osbuffer_deserialise_Ple32_WordArray: #{elem: U32, acc: U32, obsv: OSBuffer!} -> LRR (U32, U32) ()
osbuffer_deserialise_Ple32_WordArray #{elem = old, acc = idx, obsv = buf} =
  osbuffer_deserialise_Ple32 (buf, idx)
  | Success (elem, idx') ->
    ((elem, idx'), Iterate)
  | Error () ->
    ((old, idx), Break)

osbuffer_deserialise_U8_WordArray: #{elem: U8, acc: U32, obsv: OSBuffer!} -> LRR (U8, U32) ()
osbuffer_deserialise_U8_WordArray #{elem = old, acc = idx, obsv = buf} =
  osbuffer_deserialise_U8 (buf, idx)
  | Success (elem, idx') ->
    ((elem, idx'), Iterate)
  | Error ->
    ((old, idx), Break)

{-# cinline osbuffer_deserialise_Ple32 #-}
osbuffer_deserialise_Ple32: (OSBuffer!, OSBufferOffset) -> Result (U32, OSBufferOffset) ()
{-# cinline osbuffer_deserialise_Ple16 #-}
osbuffer_deserialise_Ple16: (OSBuffer!, OSBufferOffset) -> Result (U16, OSBufferOffset) ()
{-# cinline osbuffer_deserialise_U8 #-}
osbuffer_deserialise_U8: (OSBuffer!, OSBufferOffset) -> Result (U8, OSBufferOffset) ()

{-# cinline osbuffer_serialise_Ple32 #-}
osbuffer_serialise_Ple32: (OSBuffer, OSBufferOffset, U32) -> Result (OSBuffer, OSBufferOffset) OSBuffer
{-# cinline osbuffer_serialise_Ple16 #-}
osbuffer_serialise_Ple16: (OSBuffer, OSBufferOffset, U16) -> Result (OSBuffer, OSBufferOffset) OSBuffer
{-# cinline osbuffer_serialise_U8 #-}
osbuffer_serialise_U8: (OSBuffer, OSBufferOffset, U8) -> Result (OSBuffer, OSBufferOffset) OSBuffer

-- buf, size, offset
{-# cinline osbuffer_find_next_zero_bit #-}
osbuffer_find_next_zero_bit: (OSBuffer!, U32, OSBufferOffset) -> OSBufferOffset
{-# cinline osbuffer_set_bit #-}
osbuffer_set_bit: (OSBuffer, OSBufferOffset) -> (OSBuffer, Bool)

{-# cinline osbuffer_clear_bit #-}
osbuffer_clear_bit: (OSBuffer, OSBufferOffset) -> (OSBuffer, Bool)

{-# cinline osbuffer_dirty #-}
osbuffer_dirty: (ExState, OSBuffer) -> (ExState, OSBuffer)
{-# cinline osbuffer_set_new #-}
osbuffer_set_new: (ExState, OSBuffer) -> (ExState, OSBuffer)

osbuffer_set_uptodate: (ExState, OSBuffer) -> (ExState, OSBuffer) -- FIXME: kinda linux-specific
{-# cinline osbuffer_find_u32 #-}
osbuffer_find: (OSBuffer!, U8, OSBufferOffset, U32) -> U32
-- haystack, needle, offset, length

{-# cinline osbuffer_test_bit #-}
osbuffer_test_bit: (OSBuffer!, U32) -> Bool
{-# cinline osbuffer_memset #-}
osbuffer_memset: (OSBuffer, OSBufferOffset, U32, U32) -> OSBuffer

{-# cinline vfs_inode_add_dirty_osbuffer #-}
vfs_inode_add_dirty_osbuffer: (VfsInode, OSBuffer!) -> (VfsInode)

-- check if a buffer was all zeroes between [from, to)
osbuffer_all_zeroes: (OSBuffer!, OSBufferOffset, U32) -> Bool
osbuffer_all_zeroes (buf, from, to) = osbuffer_find (buf, 0, from, to - from) >= to
