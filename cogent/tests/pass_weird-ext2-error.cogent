type Ext2Superblock = {inode_count : U32}

type FsState = {super : Ext2Superblock}

type OSBuffer
type ExState

free_Ext2Superblock: Ext2Superblock take (..) -> ()
free_FsState: FsState take (..) -> ()

fs_unmount: FsState -> ()
fs_unmount state = 
    let state_t {super} = state
    and _ = free_Ext2Superblock super
    and _ = free_FsState state_t
    in ()


{-

Field inode_count of type U32 is required, but has been taken
   from constraint #{ super : { inode_count : U32 } take inode_count }  -- where is # from?
      :<~ { super : Ext2Superblock }                                    -- what does :<~ mean?
   from constraint { inode_count : U32 } take inode_count :<
      { inode_count : U32 }
   when checking that the expression at ("./../../../../cogent/tests/pass_weird_ext2_error.cogent" (line 13, column 5))
      let state_t { super } = state
      and _ = free_Ext2Superblock super
      and _ = free_FsState state_t
      in ()
   has type
      ()
   in the 1st alternative state
   in the definition at ("./../../../../cogent/tests/pass_weird_ext2_error.cogent" (line 11, column 1))
   for the function fs_unmount
Compilation failed!

-}
