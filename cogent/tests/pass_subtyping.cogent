type A = #{f1 : U8, f2 : Bool, f3 : X}
type X = {g1 : Y, g2 : U8}

type Y

foo : A -> ()
foo #{f1, f2, f3} = let f3_t { g1 } = f3
                    and _ = free_Y g1
                    and _ = free_X f3_t
                     in ()

free_X : X take (..) -> ()
free_Y : Y -> ()

type B = {f1 : U8, f2 : U8, f3 : Bool}

bar : B -> ()
bar b = free_B b

free_B : B take (..) -> ()

-- can put several times
qux : B take f1 -> B
qux b = let b'  = b  {f1 = 1}
        and b'' = b' {f1 = 2}
         in b''

-- cannot take several times, which makes sense
baz : B -> B take (f1)
baz b = let b'   {f1} = b
        and b''  {f1} = b'
         in b''
